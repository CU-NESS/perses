import numpy as np
import matplotlib.pyplot as plot
from distpy import GaussianDistribution
import os
import healpy

class GSMSpectralIndexModel(object):
	"""
	Class to create a model for the galactic spectral index
	(for a power-law like galaxy or emission component)
	using maps generated by the GSM between 40 and 180 MHz (with 5 MHz
	spacing), which are then fit simultaenously at each pixel across 
	maps using a power law to find the spectral index at each pixel.
	The native resolution in healpy nside for this particular realization
	of the extrapolation is nside = 64.
	"""

	@property
	def nside(self):
		"""
		"""
		if not hasattr(self, '_nside'):
			self._nside = 64
		return self._nside

	@nside.setter
	def nside(self, value):
		self._nside = value
	
	@property
	def num_channels(self):
		return healpy.pixelfunc.nside2npix(self.nside)
	
	@property
	def parameters(self):
		"""
		The seed parameter ensures a particular realization of each
		distribution to make each map can be replicated. It is a random
		integer.
		"""
		if not hasattr(self, '_parameters'):
			self._parameters = ['seed']
		return self._parameters

	@property
	def error(self):
		"""
		The default choice of 0.01 is taken from the Guzman 2011 paper, which
		estimates the maximum error of their map's average spectral index
		(at a given galactic location) to be approximately 0.03 from the true
		value, which is determined by comparisons with other maps and a large
		literature survey fit.
		"""
		if not hasattr(self, '_error'):
			self._error = 0.01
		return self._error

	@error.setter
	def error(self, value):
		self._error = value

	@property
	def master_spectral_index(self):
		"""
		Master spectral index map taken by fitting a power law between
		maps generated by the GSM between 40 and 180 MHz (with 5 MHz
		spacing) and then using the best-fitting spectral index at 
		each pixel as the master map.
		"""
		if not hasattr(self, '_master_spectral_index'):
			self._master_spectral_index = np.loadtxt('{!s}/input/gsm2016'.format(os.environ['PERSES']) + 
				'/GSM_40_120MHz_Extrapolated_SI_64nside')
			self._master_spectral_index = healpy.pixelfunc.ud_grade(self._master_spectral_index, self.nside)
		return self._master_spectral_index

	def __call__(self, pars):
		seed = pars[0]
		npix = healpy.pixelfunc.nside2npix(self.nside)		
		offset_distribution = GaussianDistribution(0, (self.error)**2)
		noise_offset = offset_distribution.draw(npix, random=np.random.RandomState(seed=seed))
		spectral_index = self.master_spectral_index + noise_offset
		return spectral_index
